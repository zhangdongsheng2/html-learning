#---------颜色单位--------------{}
.box1_bak{
    width: 100px;
    height: 100px;

    /*
     * 颜色单位：
     * 	 在CSS可以直接使用颜色的单词来表示不同的颜色
     * 		红色：red
     * 		蓝色：blue
     * 		绿色：green
     *   也可以使用RGB值来表示不同的颜色
     * 		- 所谓的RGB值指的是通过Red Green Blue三元色，
     * 			通过这三种颜色的不同的浓度，来表示出不同的颜色
     * 		- 例子：rgb(红色的浓度,绿色的浓度,蓝色的浓度);
     * 			- 颜色的浓度需要一个0-255之间的值，255表示最大，0表示没有
     * 			- 浓度也可以采用一个百分数来设置，需要一个0% - 100%之间的数字
     * 				使用百分数最终也会转换为0-255之间的数
     * 				0%表示0
     * 				100%表示255
     *   也可以使用十六进制的rgb值来表示颜色，原理和上边RGB原理一样，
     * 		只不过使用十六进制数来代替，使用三组两位的十六进制数组来表示一个颜色
     * 		每组表示一个颜色	,第一组表示红色的浓度，范围00-ff
     * 					第二组表示绿色的浓度，范围是00-ff
     * 					第三组表示蓝色的浓度，范围00-ff
     * 		语法：#红色绿色蓝色
     * 		十六进制：
     * 		0 1 2 3 4 5 6 7 8 9 a b c d e f
     * 		00 - ff
     * 		00表示没有，相当于rgb中的0
     * 		ff表示最大，相当于rgb中255
     * 		红色：
     * 			#ff0000
     * 		像这种两位两位重复的颜色，可以简写
     * 			比如：#ff0000 可以写成 #f00
     * 			#abc  #aabbcc
     *
     */
    /*background-color: rgb(161,187,215);*/

    /*background-color: rgb(100%,50%,50%);*/

    /*background-color: #00f;*/

    /*background-color: #abc;*/ /*#aabbcc*/

    background-color: #084098;
}


#---------字体样式--------------{}
.p1_bak{
    /*设置字体颜色,使用color来设置文字的颜色*/
    color: red;
    /*
     * 设置文字的大小,浏览器中一般默认的文字大小都是16px
         font-size设置的并不是文字本身的大小，
             在页面中，每个文字都是处在一个看不见的框中的
             我们设置的font-size实际上是设置格的高度，并不是字体的大小
             一般情况下文字都要比这个格要小一些，也有时会比格大，
             根据字体的不同，显示效果也不能
     * */
    font-size: 30px;

    /*
     * 通过font-family可以指定文字的字体
     * 	当采用某种字体时，如果浏览器支持则使用该字体，
     * 		如果字体不支持，则使用默认字体
     * 该样式可以同时指定多个字体，多个字体之间使用,分开
     * 	当采用多个字体时，浏览器会优先使用前边的字体，
     * 		如果前边没有在尝试下一个
     */
    /*font-family: arial , 微软雅黑;*/

    /*
     * 浏览器使用的字体默认就是计算机中的字体，
     * 	如果计算机中有，则使用，如果没有就不用
     *
     * 在开发中，如果字体太奇怪，用的太少了，尽量不要使用，
     * 	有可能用户的电脑没有，就不能达到想要的效果。
     */
    /*font-family: 华文彩云 , arial , 微软雅黑;*/

    font-family: "curlz mt";

}

#--------字体分类-----------------{}
/*在网页中将字体分成5大类：*/
/*serif（衬线字体）*/
/*sans-serif（非衬线字体）*/
/*monospace （等宽字体）*/
/*cursive （草书字体）*/
/*fantasy （虚幻字体）*/
/*可以将字体设置为这些大的分类,当设置为大的分类以后，*/
/*浏览器会自动选择指定的字体并应用样式*/
/*一般会将字体的大分类，指定为font-family中的最后一个字体*/



#--------其他字体样式----------{}
.p1_bak{
    color: red;
    font-size: 30px;
    font-family: "微软雅黑";
    /*
     * font-style可以用来设置文字的斜体
     * 	- 可选值：
     * 		normal，默认值，文字正常显示
     * 		italic 文字会以斜体显示
     * 		oblique 文字会以倾斜的效果显示
     * 	- 大部分浏览器都不会对倾斜和斜体做区分，
     * 		也就是说我们设置italic和oblique它们的效果往往是一样的
     *  - 一般我们只会使用italic
     */
    font-style: italic;

    /*
     * font-weight可以用来设置文本的加粗效果：
     * 		可选值：
     * 			normal，默认值，文字正常显示
     * 			bold，文字加粗显示
     *
     * 	该样式也可以指定100-900之间的9个值，
     * 		但是由于用户的计算机往往没有这么多级别的字体，所以达到我们想要的效果
     * 		也就是200有可能比100粗，300有可能比200粗，但是也可能是一样的
     */
    font-weight: bold;

    /*
     * font-variant可以用来设置小型大写字母
     * 		可选值：
     * 			normal，默认值，文字正常显示
     * 			small-caps 文本以小型大写字母显示
     *
     * 小型大写字母：
     * 		将所有的字母都以大写形式显示，但是小写字母的大写，
     * 			要比大写字母的大小小一些。
     */
    font-variant: small-caps ;
}

.p2_bak{
    /*设置一个文字大小*/
    font-size: 50px;
    /*设置一个字体*/
    font-family: 华文彩云;
    /*设置文字斜体*/
    font-style: italic;
    /*设置文字的加粗*/
    font-weight: bold;
    /*设置一个小型大写字母*/
    font-variant: small-caps;
}

.p3_bak{
    /*
     * 在CSS中还为我们提供了一个样式叫font，
     * 	使用该样式可以同时设置字体相关的所有样式,
     * 	可以将字体的样式的值，统一写在font样式中，不同的值之间使用空格隔开
     *
     * 使用font设置字体样式时，斜体 加粗 小大字母，没有顺序要求，甚至可写可不写，
     * 	如果不写则使用默认值，但是要求文字的大小和字体必须写，而且字体必须是最后一个样式
     * 	大小必须是倒数第二个样式
     *
     * 实际上使用简写属性也会有一个比较好的性能
     */
    font: small-caps bold italic 60px "微软雅黑";
}


#--------行间距----------------{}
/*
 * 在CSS并没有为我们提供一个直接设置行间距的方式，
 * 	我们只能通过设置行高来间接的设置行间距，行高越大行间距越大
 * 使用line-height来设置行高
 * 	行高类似于我们上学单线本，单线本是一行一行，线与线之间的距离就是行高，
 * 	网页中的文字实际上也是写在一个看不见的线中的，而文字会默认在行高中垂直居中显示
 *
 * 行间距 = 行高 - 字体大小
 */
.p1_bak{
    font-size: 20px;

    /*
     * 通过设置line-height可以间接的设置行高，
     * 	可以接收的值：
     * 		1.直接就收一个大小
     * 		2.可以指定一个百分数，则会相对于字体去计算行高
     * 		3.可以直接传一个数值，则行高会设置字体大小相应的倍数
     */
    /*line-height: 200%;*/

    line-height: 2;
}

.box_bak{
    width: 200px;
    height: 200px;
    background-color: #bfa;
    /*
     * 对于单行文本来说，可以将行高设置为和父元素的高度一致，
     * 	这样可以是单行文本在父元素中垂直居中
     */
    line-height: 200px;
}

.p2_bak{


    /*
     * 在font中也可以指定行高
     * 	在字体大小后可以添加/行高，来指定行高，该值是可选的，如果不指定则会使用默认值
     */
    font: 30px "微软雅黑";
    line-height: 50px;
}

#--------文本样式------------------{}
.p1_bak {
    /*
     * text-transform可以用来设置文本的大小写
     * 	可选值：
     * 		none 默认值，该怎么显示就怎么显示，不做任何处理
     * 		capitalize 单词的首字母大写，通过空格来识别单词
     * 		uppercase 所有的字母都大写
     * 		lowercase 所有的字母都小写
     */
    text-transform: lowercase;
}

.p2_bak {
    /*
     * text-decoration可以用来设置文本的修饰
     * 		可选值：
     * 			none：默认值，不添加任何修饰，正常显示
     * 			underline 为文本添加下划线
     * 			overline 为文本添加上划线
     * 			line-through 为文本添加删除线
     */
    text-decoration: line-through;
}

a_bak {
    /*超链接会默认添加下划线，也就是超链接的text-decoration的默认值是underline
         如果需要去除超链接的下划线则需要将该样式设置为none
     * */
    text-decoration: none;
}

.p3_bak {
    /**
     * letter-spacing可以指定字符间距
     */
    /*letter-spacing: 10px;*/

    /*
     * word-spacing可以设置单词之间的距离
     * 	实际上就是设置词与词之间空格的大小
     */
    word-spacing: 120px;
}


.p4_bak{
    /*
     * text-align用于设置文本的对齐方式
     * 	可选值：
     * 		left 默认值，文本靠左对齐
     * 		right ， 文本靠右对齐
     * 		center ， 文本居中对齐
     * 		justify ， 两端对齐
     * 				- 通过调整文本之间的空格的大小，来达到一个两端对齐的目的
     */
    text-align: justify ;
}

.p5_bak{

    font-size: 20px;

    /*
     * text-indent用来设置首行缩进
     * 	当给它指定一个正值时，会自动向右侧缩进指定的像素
     * 	如果为它指定一个负值，则会向左移动指定的像素,
     * 		通过这种方式可以将一些不想显示的文字隐藏起来
     *  这个值一般都会使用em作为单位
     */
    text-indent: -99999px;
}


#---------盒子模型----------------------{}
.box1_bak{
    /*
     * 使用width来设置盒子内容区的宽度
     * 使用height来设置盒子内容区的高度
     *
     * width和height只是设置的盒子内容区的大小，而不是盒子的整个大小，
     * 	盒子可见框的大小由内容区，内边距和边框共同决定
     */
    width: 300px;
    height: 300px;

    /*设置背景颜色*/
    background-color: #bfa;

    /*
     * 为元素设置边框
     * 	要为一个元素设置边框必须指定三个样式
     * 		border-width:边框的宽度
     * 		border-color:边框颜色
     * 		border-style:边框的样式
     */

    /*
     * 设置边框的宽度
     */
    /*border-width:10px ;*/

    /*
         使用border-width可以分别指定四个边框的宽度
         如果在border-width指定了四个值，
             则四个值会分别设置给 上 右 下 左，按照顺时针的方向设置的

         如果指定三个值，
             则三个值会分别设置给	上  左右 下

         如果指定两个值，
             则两个值会分别设置给 上下 左右

         如果指定一个值，则四边全都是该值

         除了border-width，CSS中还提供了四个border-xxx-width
             xxx的值可能是top right bottom left
         专门用来设置指定边的宽度
     * */
    /*border-width:10px 20px 30px 40px ;*/
    /*border-width:10px 20px 30px ;*/
    /*border-width: 10px 20px ;*/
    border-width: 10px;

    /*border-left-width:100px ;*/


    /*
     * 设置边框的颜色
     * 和宽度一样，color也提供四个方向的样式，可以分别指定颜色
     * border-xxx-color
     */
    border-color: red;
    /*border-color: red yellow orange blue;*/
    /*border-color: red yellow orange;*/
    /*border-color: red yellow;*/

    /*
     * 设置边框的样式
     * 	可选值：
     * 		none，默认值，没有边框
     * 		solid 实线
     * 		dotted 点状边框
     * 		dashed 虚线
     * 		double 双线
     *
     * style也可以分别指定四个边的边框样式，规则和width一致，
     * 	同时它也提供border-xxx-style四个样式，来分别设置四个边
     */
    /*border-style: double;*/
    border-style: solid dotted dashed double;

    /*
 * 使用padding可以同时设置四个边框的样式，规则和border-width一致
 */
    /*padding: 100px;*/

    /*padding: 100px 200px;*/

    /*padding: 100px 200px 300px;*/

    padding: 100px 200px 300px 400px;

    /*
 * 为子元素设置一个上外边距，是子元素的位置下移
 */
    /*margin-top: 100px;*/
}

#----------清除默认样式------------{}
/*
 * 清除浏览器的默认样式
 */

*{
    margin: 0;
    padding: 0;
}


#------------隐藏显示和转换元素----------------{}
a_bak{
    background-color: #bfa;

    /*
     * 将一个内联元素变成块元素，
     * 	通过display样式可以修改元素的类型
     * 		可选值：
     * 			inline：可以将一个元素作为内联元素显示
     * 			block: 可以将一个元素设置块元素显示
     * 			inline-block：将一个元素转换为行内块元素
     * 					- 可以使一个元素既有行内元素的特点又有块元素的特点
     * 						既可以设置宽高，又不会独占一行
     * 			none: 不显示元素，并且元素不会在页面中继续占有位置
     */
    display: none;

    /*为其设置一个宽和高*/
    width: 500px;
    height: 500px;
}

.box_bak{
    width: 100px;
    height: 100px;
    background-color: orange;

    /*
     * display: none;
     * 	使用该方式隐藏的元素，不会在页面中显示，并且不再占据页面的位置
     */
    /*display: none;*/

    /*
     * visibility
     * 	- 可以用来设置元素的隐藏和显示的状态
     * 	- 可选值：
     * 		visible 默认值，元素默认会在页面显示
     * 		hidden 元素会隐藏不显示
     *
     * 使用 visibility:hidden;隐藏的元素虽然不会在页面中显示，
     * 		但是它的位置会依然保持
     */
    visibility:hidden ;
}


#--------内容溢出滚动条------------{}
.box2{
    width: 200px;
    height: 200px;
    background-color: #bfa;
    /*
     * 子元素默认是存在于父元素的内容区中，
     * 		理论上讲子元素的最大可以等于父元素内容区大小
     * 	如果子元素的大小超过了父元素的内容区，则超过的大小会在父元素以外的位置显示，
     * 		超出父元素的内容，我们称为溢出的内容
     *  父元素默认是将溢出内容，在父元素外边显示，
     * 	通过overflow可以设置父元素如何处理溢出内容：
     * 		可选值：
     * 			- visible，默认值，不会对溢出内容做处理，元素会在父元素以外的位置显示
     * 			- hidden, 溢出的内容，会被修剪，不会显示
     * 			- scroll, 会为父元素添加滚动条，通过拖动滚动条来查看完整内容
     * 					- 该属性不论内容是否溢出，都会添加水平和垂直双方向的滚动条
     * 			- auto，会根据需求自动添加滚动条，
     * 						需要水平就添加水平
     * 						需要垂直就添加垂直
     * 						都不需要就都不加
     */
    overflow: auto;
}

#----------文档样式的说明---------------{}
/*文档流*/
/*文档流处在网页的最底层，它表示的是一个页面中的位置，*/
/*我们所创建的元素默认都处在文档流中*/

/*元素在文档流中的特点*/
/*块元素*/
/*1.块元素在文档流中会独占一行，块元素会自上向下排列。*/
/*2.块元素在文档流中默认宽度是父元素的100%*/
/*3.块元素在文档流中的高度默认被内容撑开*/
/* 内联元素*/
/*1.内联元素在文档流中只占自身的大小，会默认从左向右排列，*/
/* 如果一行中不足以容纳所有的内联元素，则换到下一行，*/
/* 继续自左向右。*/
/*2.在文档流中，内联元素的宽度和高度默认都被内容撑开*/
/*-->*/

/*<!--*/
/*当元素的宽度的值为auto时，此时指定内边距不会影响可见框的大小，*/
/*而是会自动修改宽度，以适应内边距*/



#-------浮动------------{}
.box1-fudong{
    width: 600px;
    height: 200px;
    background-color: red;
    /*
     * 块元素在文档流中默认垂直排列，所以这个三个div自上至下依次排开，
     * 	如果希望块元素在页面中水平排列，可以使块元素脱离文档流
     * 使用float来使元素浮动，从而脱离文档流
     * 	可选值：
     * 		none，默认值，元素默认在文档流中排列
     * 		left，元素会立即脱离文档流，向页面的左侧浮动
     * 		right，元素会立即脱离文档流，向页面的右侧浮动
     *
     * 当为一个元素设置浮动以后（float属性是一个非none的值），
     * 	元素会立即脱离文档流，元素脱离文档流以后，它下边的元素会立即向上移动
     * 	元素浮动以后，会尽量向页面的左上或这是右上漂浮，
     * 	直到遇到父元素的边框或者其他的浮动元素
     * 	如果浮动元素上边是一个没有浮动的块元素，则浮动元素不会超过块元素
     * 	浮动的元素不会超过他上边的兄弟元素，最多最多一边齐
     */
    float: left;
}

.box2-fudong{
    width: 600px;
    height: 200px;
    background-color: yellow;

    float: left;
}

.box3-fudong{
    width: 200px;
    height: 200px;
    background-color: green;

    float: right;

}

.clear-fudong {
    clear: both;
}

.box4-fudong{
    width: 100px;
    height: 100px;
    background-color: #bfa;
    /*
     * 浮动的元素不会盖住文字，文字会自动环绕在浮动元素的周围，
     * 	所以我们可以通过浮动来设置文字环绕图片的效果
     */


    /*box1向左浮动*/
    float: left;

}

.p1-fudong{
    background-color: yellow;
}

#-----高度塌陷解决---- {
    /*
     * 根据W3C的标准，在页面中元素都一个隐含的属性叫做Block Formatting Context
     * 	简称BFC，该属性可以设置打开或者关闭，默认是关闭的。
     * 当开启元素的BFC以后，元素将会具有如下的特性：
     * 	1.父元素的垂直外边距不会和子元素重叠
     * 	2.开启BFC的元素不会被浮动元素所覆盖
     * 	3.开启BFC的元素可以包含浮动的子元素
     *
     * 如何开启元素的BFC
     * 	1.设置元素浮动
     * 		- 使用这种方式开启，虽然可以撑开父元素，但是会导致父元素的宽度丢失
     * 			而且使用这种方式也会导致下边的元素上移，不能解决问题
     * 	2.设置元素绝对定位
     * 	3.设置元素为inline-block
     * 		- 可以解决问题，但是会导致宽度丢失，不推荐使用这种方式
     * 	4.将元素的overflow设置为一个非visible的值
     *
     * 推荐方式：将overflow设置为hidden是副作用最小的开启BFC的方式。
     */

    /*overflow: hidden;*/

    /*
     *但是在IE6及以下的浏览器中并不支持BFC，所以使用这种方式不能兼容IE6。
     * 在IE6中虽然没有BFC，但是具有另一个隐含的属性叫做hasLayout，
     * 该属性的作用和BFC类似，所在IE6浏览器可以通过开hasLayout来解决该问题
     * 开启方式很多，我们直接使用一种副作用最小的：
     * 	直接将元素的zoom设置为1即可
     *
     */

    /*
     * zoom表示放大的意思，后边跟着一个数值，写几就将元素放大几倍
     * zoom:1表示不放大元素，但是通过该样式可以开启hasLayout
     * zoom这个样式，只在IE中支持，其他浏览器都不支持
     */
    /* zoom:1; */
    /* overflow: hidden;
    content: ""; */
    /* 既可以解决高度塌陷，又可以确保父元素和子元素的垂直外边距不会重叠 */
    /* display: table; */
    /* clear: both; */
}

.box1-fudong-tx{
    border: 1px solid red;
}

.box2-fudong-tx{
    width: 100px;
    height: 100px;
    background-color: blue;

    float: left;
}

/*通过after伪类，选中box1的后边*/
/*
 * 可以通过after伪类向元素的最后添加一个空白的块元素，然后对其清除浮动，
 * 	这样做和添加一个div的原理一样，可以达到一个相同的效果，
 * 	而且不会在页面中添加多余的div，这是我们最推荐使用的方式，几乎没有副作用
 */
.clearfix:after{
    /*添加一个内容*/
    content: "";
    /*转换为一个块元素*/
    display: table;
    /*清除两侧的浮动*/
    clear: both;
}

/*
 * 在IE6中不支持after伪类,
 * 	所以在IE6中还需要使用hasLayout来处理
 */
.clearfix{
    zoom:1;
}



#---------------定位----------------------- {}

.position-box1{
    width: 200px;
    height: 200px;
    background-color: red;
}

.position-box2{
/*
* 定位：
* 	- 定位指的就是将指定的元素摆放到页面的任意位置
* 		通过定位可以任意的摆放元素
* 	- 通过position属性来设置元素的定位
* 		-可选值：
* 			static：默认值，元素没有开启定位
* 			relative：开启元素的相对定位
* 			absolute：开启元素的绝对定位
* 			fixed：开启元素的固定定位（也是绝对定位的一种）
*/

/*
* 当元素的position属性设置为relative时，则开启了元素的相对定位
* 	1.当开启了元素的相对定位以后，而不设置偏移量时，元素不会发生任何变化
*  2.相对定位是相对于元素在文档流中原来的位置进行定位
* 	3.相对定位的元素不会脱离文档流
* 	4.相对定位会使元素提升一个层级，会盖住下面的元素。
* 	5.相对定位不会改变元素的性质，块还是块，内联还是内联, 相当于灵魂出窍，原来的位置还会保留。
*/
    width: 200px;
    height: 200px;
    background-color: yellow;
    position: relative;
    left: 200px;
    top: 200px;
}

.position-box3{
    width: 200px;
    height: 200px;
    background-color:blue;
}



/*
    * 当position属性值设置为absolute时，则开启了元素的绝对定位
    * 
    * 绝对定位：
    * 	1.开启绝对定位，会使元素脱离文档流
    * 	2.开启绝对定位以后，如果不设置偏移量，则元素的位置不会发生变化
    * 	3.绝对定位是相对于离他最近的开启了定位的祖先元素进行定位的（一般情况，开启了子元素的绝对定位都会同时开启父元素的相对定位）
    * 		如果所有的祖先元素都没有开启定位，则会相对于浏览器窗口进行定位
    * 	4.绝对定位会使元素提升一个层级
    * 	5.绝对定位会改变元素的性质，
    * 		内联元素变成块元素，
    * 		块元素的宽度和高度默认都被内容撑开
    */

.position-box4{
    width: 500px;
    height: 500px;
    background-color:rgb(0, 255, 255);
    position: relative;
}

.position-box5{
    width: 200px;
    height: 200px;
    background-color:rgb(170, 170, 209);
    /* position: absolute; */
    left: 900px;
    /*
    * 当元素的position属性设置fixed时，则开启了元素的固定定位
    * 	固定定位也是一种绝对定位，它的大部分特点都和绝对定位一样
    * 不同的是：
    * 		固定定位永远都会相对于浏览器窗口进行定位
    * 		固定定位会固定在浏览器窗口某个位置，不会随滚动条滚动
    * 
    * IE6不支持固定定位
    */
    position: fixed;
    top: 0px;
    /*
    * 如果定位元素的层级是一样，则下边的元素会盖住上边的
    * 通过z-index属性可以用来设置元素的层级
    * 可以为z-index指定一个正整数作为值，该值将会作为当前元素的层级
    * 	层级越高，越优先显示
    * 
    * 对于没有开启定位的元素不能使用z-index
    */
    z-index: -25;
}
.position-box6{
    width: 200px;
    height: 200px;
    background-color:rgb(229, 255, 0);
    position: absolute;
    left: 100px;
    top: 0px;
}


#-----------背景------------------{}
			
.bg-box1{
    width: 1024px;
    height: 724px;
    margin: 0 auto;
    /*设置背景样式*/
    background-color: #bfa;
    /*
     * 使用background-image来设置背景图片
     * 	- 语法：background-image:url(相对路径);
     * 
     * 	- 如果背景图片大于元素，默认会显示图片的左上角
     * 	- 如果背景图片和元素一样大，则会将背景图片全部显示
     * 	- 如果背景图片小于元素大小，则会默认将背景图片平铺以充满元素
     * 
     * 可以同时为一个元素指定背景颜色和背景图片，
     * 	这样背景颜色将会作为背景图片的底色
     * 	一般情况下设置背景图片时都会同时指定一个背景颜色
     */
    background-image:url(../img/1.png);
    
    /*
     * background-repeat用于设置背景图片的重复方式
     * 	可选值：
     * 		repeat，默认值，背景图片会双方向重复（平铺）
     * 		no-repeat ，背景图片不会重复，有多大就显示多大
     * 		repeat-x， 背景图片沿水平方向重复
     * 		repeat-y，背景图片沿垂直方向重复
     */
    background-repeat: no-repeat;
    
    /*
    * 背景图片默认是贴着元素的左上角显示
    * 通过background-position可以调整背景图片在元素中的位置
    * 可选值：
    * 		该属性可以使用 top right left bottom center中的两个值
    * 			来指定一个背景图片的位置
    * 			top left 左上
    * 			bottom right 右下
    * 			如果只给出一个值，则第二个值默认是center
    * 
    * 		也可以直接指定两个偏移量，
    * 			第一个值是水平偏移量
    * 				- 如果指定的是一个正值，则图片会向右移动指定的像素
    * 				- 如果指定的是一个负值，则图片会向左移动指定的像素
    * 			第二个是垂直偏移量	
    * 				- 如果指定的是一个正值，则图片会向下移动指定的像素
    * 				- 如果指定的是一个负值，则图片会向上移动指定的像素
    * 		
    */
    background-position: 80px -40px;
    /*
    * background-attachment用来设置背景图片是否随页面一起滚动
    * 		可选值：
    * 			scroll，默认值，背景图片随着窗口滚动
    * 			fixed，背景图片会固定在某一位置，不随页面滚动
    * 
    * 不随窗口滚动的图片，我们一般都是设置给body，而不设置给其他元素
    */
    background-attachment: scroll;

}

body{
    /* background-attachment: fixed;
    background-image:url(../img/1.png);
    background-repeat: no-repeat;
    background-position: 800px 40px; */

    /*
    * background 简写属性
    * 	- 通过该属性可以同时设置所有背景相关的样式
    * 	- 没有顺序的要求，谁在前睡在后都行
    * 		也没有数量的要求，不写的样式就使用默认值
    */
    background: rgb(247, 248, 246) url(../img/1.png) center center no-repeat fixed;
}


.bg-btn:link{
    /*将a转换为块元素*/
    display: block;
    /*设置宽高*/
    width: 93px;
    height: 29px;
    margin-bottom: 200px;
    margin-left: 100px;
    /*设置背景图片*/
    background-image: url(../img/btn.png);
    /*设置背景图片不重复*/
    background-repeat: no-repeat;
    background-size: 100% 100%;
}

.bg-btn:hover{
    background-position: -93px 0px;
}

.bg-btn:active{
    background-position: -186px 0px;
}







